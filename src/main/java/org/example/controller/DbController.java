package org.example.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Optional;
import org.example.repository.UserRepository;
import org.example.models.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

// use REST-CONTROLLER so that it can be picked up by swagger3
// controller doesn't get picked by swagger
@RestController // This means that this class is a Controller
@RequestMapping(path = "/db") // This means URL's start with /demo (after Application path)
public class DbController {

  private final UserRepository userRepository;
  private ObjectMapper objectMapper;

  /**
   * This means to get the bean called userRepository Which is auto-generated by Spring, we will use
   * it to handle the data
   */
  @Autowired
  public DbController(UserRepository userRepository) {
    this.userRepository = userRepository;
    objectMapper = new ObjectMapper();
  }

  @PostMapping(path = "/add") // Map ONLY POST Requests
  public ResponseEntity<User> addNewUser(
      @RequestBody User user
  ) {
    userRepository.save(user);
    return ResponseEntity.ok(user);
  }

  @GetMapping(path = "/get/{userId}")
  public ResponseEntity<User> getUser(@PathVariable("userId") Long userId) {
    Optional<User> user = userRepository.findById(userId);
    return ResponseEntity.ok(user.orElse(null));
  }

  // Note : direct return type like User/String was not working but it was working
  // when wrapped inside ResponseEntity
  @GetMapping(path = "/getAllUsers")
  public ResponseEntity<String> getAllUsers() throws JsonProcessingException {
    return ResponseEntity.ok(objectMapper.writeValueAsString(userRepository.findAll()));
  }
}
