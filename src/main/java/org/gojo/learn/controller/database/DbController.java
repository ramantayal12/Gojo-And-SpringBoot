package org.gojo.learn.controller.database;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.util.Optional;
import org.gojo.learn.entity.BookEntity;
import org.gojo.learn.entity.UserEntity;
import org.gojo.learn.repository.BookRepository;
import org.gojo.learn.repository.UserRepository;
import org.gojo.learn.serialisation.SerialisationUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

// use REST-CONTROLLER so that it can be picked up by swagger3
// controller doesn't get picked by swagger
@RestController // This means that this class is a Controller
@RequestMapping(path = "/db") // This means URL's start with /db (after Application path)
public class DbController {

  private final UserRepository userRepository;
  private final BookRepository bookRepository;

  /**
   * This means to get the bean called userRepository Which is auto-generated by Spring, we will use
   * it to handle the data
   */
  @Autowired
  public DbController(UserRepository userRepository, BookRepository bookRepository) {
    this.userRepository = userRepository;
    this.bookRepository = bookRepository;
  }

  @PostMapping(path = "/user/add") // Map ONLY POST Requests
  public ResponseEntity<UserEntity> addNewUser(
      @RequestBody UserEntity userEntity
  ) {
    userRepository.save(userEntity);
    return ResponseEntity.ok(userEntity);
  }

  @GetMapping(path = "/user/get-by-id/{user-id}")
  public ResponseEntity<UserEntity> getUser(@PathVariable("user-id") Long userId) {
    Optional<UserEntity> user = userRepository.findById(userId);
    return ResponseEntity.ok(user.orElse(null));
  }

  // Note : direct return type like User/String was not working but it was working
  // when wrapped inside ResponseEntity
  @GetMapping(path = "/user/get-all-users")
  public ResponseEntity<String> getAllUsers() throws JsonProcessingException {
    String response = SerialisationUtil.serialize(userRepository.findAll());
    return ResponseEntity.ok(response);
  }

  @PostMapping(path = "/book/add")
  public ResponseEntity<BookEntity> addNewBook(
      @RequestBody BookEntity bookEntity
  ) {
    return ResponseEntity.ok(bookRepository.save(bookEntity));
  }

  @GetMapping(path = "/book/{lastname}")
  public ResponseEntity<BookEntity> getBookByLastName(@RequestParam("lastname") String lastName) {
    return ResponseEntity.ok(bookRepository.findByLastName(lastName));
  }
}
